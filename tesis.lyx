#LyX 1.6.4 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language spanish
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Un algoritmo distribuído de Ruin & Recreate para VRPTW
\end_layout

\begin_layout Author
Andrés Martínez Quijano
\begin_inset Newline newline
\end_inset

aquijano@dc.uba.ar
\end_layout

\begin_layout Abstract
bla bla bla
\end_layout

\begin_layout Verse
\begin_inset Newpage pagebreak
\end_inset

dedicatorias locas
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Abstract
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList algorithm

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Section
Descripción del problema
\end_layout

\begin_layout Subsection
Introducción
\end_layout

\begin_layout Standard
El ruteo de vehículos consiste en la asignación de clientes a vehículos
 en un orden y tiempo determinados.
 En el VRP
\begin_inset Foot
status open

\begin_layout Plain Layout
del inglés 
\emph on
Vehicle Routing Problem
\end_layout

\end_inset

 existe un número fijo de clientes que deben ser visitados por uno o más
 vehículos a fin de satisfacer sus necesidades.
 Una solución a una instancia de VRP consiste en un conjunto de rutas que
 debe recorrer cada vehículo, partiendo y terminando en el 
\emph on
depósito,
\emph default
 de forma que todos los clientes sean visitados y sus demandas y restricciones
 sean cumplidas.
 El objetivo del VRP es encontrar la mejor solución, según diversos parámetros
 de optimización.
 El problema se suele modelar como un grafo donde los nodos representan
 el depósito y los clientes, y los ejes los caminos existentes entre clientes
 (en general el grafo es completo).
 Existen diversas variantes al problema original; en esta tesis se trata
 exclusivamente del VRPTW
\begin_inset Foot
status open

\begin_layout Plain Layout
del inglés 
\emph on
Vehicle Routing Problem with Time Windows
\end_layout

\end_inset

, una variante donde cada cliente tiene asociada una ventana de tiempo que
 restringe el momento en que puede ser visitada por un vehículo.
\end_layout

\begin_layout Subsection
Notación
\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $G=(V,A)$
\end_inset

 grafo completo donde 
\begin_inset Formula $V=\{0,\ldots,n\}$
\end_inset

 y 
\begin_inset Formula $A$
\end_inset

 el conjunto de ejes.
 El nodo 
\begin_inset Formula $0$
\end_inset

 corresponde al depósito de donde parten los vehículos y 
\begin_inset Formula $i=1\ldots n$
\end_inset

 los clientes.
 También se nota al depósito como el nodo 
\begin_inset Formula $n+1$
\end_inset

.
\end_layout

\begin_layout Standard
Un costo no-negativo 
\begin_inset Formula $c_{ij}$
\end_inset

 es asociado a cada eje 
\begin_inset Formula $(i,j)\in A$
\end_inset

, representando el costo de viajar desde el nodo 
\begin_inset Formula $i$
\end_inset

 hasta el nodo 
\begin_inset Formula $j$
\end_inset

.
 En el caso que plantea esta tesis, se asume que el grafo no es dirigido,
 o sea 
\begin_inset Formula $c_{ij}=c_{ji}\forall i,j\in A,i\neq j$
\end_inset

.
 
\end_layout

\begin_layout Standard
Cada cliente tiene asociado una demanda nonegativa 
\begin_inset Formula $d_{i}$
\end_inset

 (siendo 
\begin_inset Formula $d_{0}=0$
\end_inset

) y una ventana de tiempo 
\begin_inset Formula $[a_{i},b_{i}]$
\end_inset

 con 
\begin_inset Formula $a_{i}<b_{i}$
\end_inset

.
 Los parámetros 
\begin_inset Formula $E$
\end_inset

 y 
\begin_inset Formula $L$
\end_inset

 indican el comienzo y fin, respectivamente, de la ventana de tiempo del
 depósito: 
\begin_inset Formula $[a_{0},b_{0}]=[E,L]$
\end_inset

, donde 
\begin_inset Formula $a_{0}\leq a_{i}\forall i\in V$
\end_inset

 y 
\begin_inset Formula $b_{0}\geq b_{i}\forall i\in V$
\end_inset

.
 También se asocia a cada cliente un valor no-negativo 
\begin_inset Formula $s_{i}$
\end_inset

 indicando el tiempo de servicio, esto es, el tiempo mínimo que un vehículo
 debe permanecer en el cliente cargando o descargando mercadería antes de
 poder proseguir su ruta.
\end_layout

\begin_layout Standard
Se dispone de 
\begin_inset Formula $K$
\end_inset

 vehículos idénticos entre sí, cada uno con capacidad de carga 
\begin_inset Formula $C$
\end_inset

\SpecialChar \@.

\end_layout

\begin_layout Standard
Se define además:
\end_layout

\begin_layout Standard
\begin_inset Formula $x_{ijk}=\begin{cases}
1 & \mbox{si \ensuremath{(i,j)\in A\mbox{ es usado por el vehículo \ensuremath{k}}\in K}}\\
0 & \mbox{si no}\end{cases}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $w_{ik},i\in V,k\in K$
\end_inset

 el comienzo del servicio en el nodo 
\begin_inset Formula $i$
\end_inset

 por el vehículo 
\begin_inset Formula $k$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\Delta^{+}(i)=\{j/(i,j)\in A\}$
\end_inset

 los nodos 
\emph on
salientes
\emph default
 del nodo 
\begin_inset Formula $i$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Formula $\Delta^{-}(i)=\{j/(j,i)\in A\}$
\end_inset

 los nodos 
\emph on
entrantes 
\emph default
al nodo 
\begin_inset Formula $i$
\end_inset

 
\begin_inset Foot
status open

\begin_layout Plain Layout
dado que esta tesis considera únicamente grafos completos 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
\lang english

\begin_inset Formula $\Delta^{+}(i)=\Delta^{-}(i)=V\setminus\{i\}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Formulación
\end_layout

\begin_layout Standard
La solución óptima a un problema VRPTW consiste entonces en hallar
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\min\underset{k\in K}{\sum}\underset{(i,j)\in A}{\sum}c_{ij}x_{ijk}\label{eq:1}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
sujeto a
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\underset{k\in K}{\sum}\underset{j\in\Delta^{+}(i)}{\sum}x_{ijk}=1\qquad\forall k\in K\label{eq:2}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\underset{j\in\Delta^{+}(0)}{\sum}x_{0jk}=1\qquad\forall k\in K\label{eq:3}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\underset{i\in\Delta^{-}(j)}{\sum}-\underset{i\in\Delta^{+}(j)}{\sum}x_{ijk}=0\qquad\forall k\in K,j\in N\label{eq:4}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\underset{i\in\Delta^{-}(n+1)}{\sum}x_{i,n+1,k}=1\qquad\forall k\in K\label{eq:5}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
x_{ijk}(w_{ik}+s_{i}+t_{ij}-w_{jk})\leq0\qquad\forall k\in K,(i,j)\in A\label{eq:6}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
a_{i}\underset{j\in\Delta^{+}(i)}{\sum}x_{ijk}\leq w_{ik}\leq b_{i}\underset{j\in\Delta^{+}(i)}{\sum}\qquad\forall k\in K,i\in N\label{eq:7}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
E\leq w_{ik}\leq L\qquad\forall k\in K,i\in\{0,n+1\}\label{eq:8}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\underset{i\in N}{\sum}d_{i}\underset{j\in\Delta^{+}(i)}{\sum}x_{ijk}\leq C\qquad\forall k\in K\label{eq:9}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
x_{ijk}\geq0\qquad\forall k\in K,(i,j)\in A\label{eq:10}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
x_{ijk}\in\{0,1\}\qquad\forall k\in K,(i,j)\in A\label{eq:11}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
donde:
\end_layout

\begin_layout Standard
\begin_inset Formula $N=V\setminus\{0\}$
\end_inset

 el conjunto de clientes
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:2"

\end_inset

 restringe las visitas a sólo un vehículo por cliente
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:3"

\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:4"

\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:5"

\end_inset

 modelan el tipo de recorridos que un vehículo puede hacer (salir del depósito,
 visitar clientes y volver al depósito)
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:6"

\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:8"

\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:9"

\end_inset

 aseguran factibilidad en cuanto a ventanas de tiempo y capacidad de vehículos
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:7"

\end_inset

 fuerza que 
\begin_inset Formula $w_{ik}=0$
\end_inset

 si el vehículo 
\begin_inset Formula $k$
\end_inset

 no visita al cliente 
\begin_inset Formula $i$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:10"

\end_inset

 establece el caracter no-negativo de 
\begin_inset Formula $x_{ijk}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:11"

\end_inset

 limita 
\begin_inset Formula $x_{ijk}$
\end_inset

 a valores 
\begin_inset Formula $0$
\end_inset

 ó 
\begin_inset Formula $1$
\end_inset


\end_layout

\begin_layout Standard
Dado que 
\noun on
VRPTW
\noun default
 es un problema 
\noun on
NP-HARD
\noun default
, resulta impracticable buscar la optimalidad mediante algoritmos exactos,
 por lo que se acude a heurísticas
\end_layout

\begin_layout Section
Heurísticas conocidas
\end_layout

\begin_layout Section
Colonia de hormigas
\end_layout

\begin_layout Section
Ruin & Recreate
\end_layout

\begin_layout Standard
La heurística Ruin & Recreate 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 consiste en arruinar (
\emph on
ruin
\emph default
) una solución (generalmente factible) para luego reconstruirla (
\emph on
recreate
\emph default
) procurando obtener una mejor solución de la que se partió\SpecialChar \@.
 En 
\noun on
VRPTW
\noun default
 arruinar la solución consiste en quitar 
\begin_inset Formula $t$
\end_inset

 clientes según un criterio de arruine, dejando una solución infactible,
 donde sólo 
\begin_inset Formula $n-t$
\end_inset

 clientes son visitados por los vehículos.
 Luego el algoritmo intenta reintroducir los 
\begin_inset Formula $t$
\end_inset

 clientes a la solución rota, procurando obtener una mejor solución de la
 cual se partió.
 El proceso se repite hasta que una condición es satisfecha, sea porque
 se consiguió una solución suficientemente buena, porque se cumplió un número
 fijo de iteraciones, porque ocurrieron suficientes iteraciones sin obtener
 mejoras a la solución o cualquier otra condición de corte.
\end_layout

\begin_layout Standard
Los puntos claves del algoritmo son, claramente, la forma en que se arruina
 y recrea la solución\SpecialChar \@.

\end_layout

\begin_layout Subsection
Ruin
\end_layout

\begin_layout Standard
Arruinar la solución es computacionalmente sencillo, aunque algorítmicamente
 es tan importante como recrearla.
 Elegir qué nodos quitar de la solución es crucial a la hora de poder generar
 una mejora o no.
 En 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 se plantean diversas variantes básicas en lo referido a ruteo de vehículos,
 por ejemplo:
\end_layout

\begin_layout Itemize
Espacial: dado un nodo 
\begin_inset Formula $n$
\end_inset

 se quitan de la solución 
\begin_inset Formula $n$
\end_inset

 y todos los nodos cuya distancia a 
\begin_inset Formula $n$
\end_inset

 sea menor a un parámetro dado
\end_layout

\begin_layout Itemize
Cadena: se quita una cadena de nodos consecutivos en la solución de largo
 parametrizable
\end_layout

\begin_layout Itemize
Azar: cada nodo de la solución se quita según un parámetro de probabilidad
\end_layout

\begin_layout Subsection
Recreate
\end_layout

\begin_layout Standard
La recreación de la solución consiste en volver a incluír los nodos quitados
 en la etapa 
\begin_inset Quotes eld
\end_inset

Ruin
\begin_inset Quotes erd
\end_inset

 de forma de conseguir una mejor solución a la original.
 Idealmente, los nodos quitados se agregarían de forma óptima a la instancia
 rota.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Ruin & Recreate para VRPTW
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
repetir
\end_layout

\begin_layout LyX-Code

\emph on
sol
\emph default

\begin_inset Formula $\leftarrow$
\end_inset

solución inicial
\end_layout

\begin_layout LyX-Code
arruinar 
\emph on
sol
\emph default
 quitando 
\emph on
n
\emph default
 clientes
\end_layout

\begin_layout LyX-Code

\emph on
nueva_sol
\emph default

\begin_inset Formula $\leftarrow$
\end_inset

reconstruir 
\emph on
sol
\end_layout

\begin_layout LyX-Code
si 
\emph on
nueva_sol
\emph default
 es mejor que 
\emph on
sol
\end_layout

\begin_deeper
\begin_layout LyX-Code

\emph on
sol
\emph default

\begin_inset Formula $\leftarrow$
\end_inset


\emph on
nueva_sol
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
hasta
\series default
 que se cumpla un criterio de finalización
\end_layout

\end_inset


\end_layout

\begin_layout Section
El algoritmo
\end_layout

\begin_layout Standard
El algoritmo presentado es paralelo y distribuído, pudiendose escalar fácilmente
 agregando computadoras a una red.
 
\end_layout

\begin_layout Standard
El algoritmo apunta a disminuír tanto la longitud total recorrida por los
 vehículos como la cantidad de vehículos necesaria para visitar todos los
 clientes.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename arquitectura.png
	scale 25
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Arquitectura de la solución
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cada instancia de RAR o RARV pueden estar en diferentes computadoras o en
 una misma computadora con procesador multinúcleo.
 Dado un árbitro ejecutandose, un número indefinido de instancias de tipo
 RAR o RARV pueden conectarse al árbitro, recibir información sobre el problema
 a resolver y comenzar a trabajar sobre el mismo.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Árbitro
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
arbitro(
\shape italic
instancia
\shape default
, 
\shape italic
tiempo
\shape default
) {
\end_layout

\begin_deeper
\begin_layout LyX-Code

\shape italic
mejor
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

vecino_mas_cercano(
\shape italic
instancia
\shape default
)
\end_layout

\begin_layout LyX-Code
por cada procesador/núcleo {
\end_layout

\begin_deeper
\begin_layout LyX-Code
iniciar RAR(
\shape italic
mejor
\shape default
, ?)
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
mientras no pase 
\shape italic
tiempo
\shape default
 {
\end_layout

\begin_deeper
\begin_layout LyX-Code

\shape italic
nueva
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

recibir_mejor_solucion()
\end_layout

\begin_layout LyX-Code
si nueva es mejor que 
\shape italic
mejor
\shape default
 {
\end_layout

\begin_deeper
\begin_layout LyX-Code

\shape italic
mejor
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\shape italic
nueva
\end_layout

\begin_layout LyX-Code
enviar 
\shape italic
nueva
\shape default
 a los nodos
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
enviar 
\series bold
\shape smallcaps
STOP
\series default
\shape default
 a los procesos
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Objetivo Múltiple
\end_layout

\begin_layout Standard
Para lograr mayor efectividad al resolver el problema, se ejecutan en paralelo
 dos tipos de rutinas.
 
\noun on
RAR
\noun default
 (Ruin And Recreate) intentará optimizar el recorrido total de la solución
 mientras que 
\noun on
RARV
\noun default
 (Ruin And Recreate Vehicular) se enfoca exclusivamente en reducir la cantidad
 de vehículos necesarios.
\end_layout

\begin_layout Standard

\noun on
RAR
\noun default
 y 
\noun on
RARV
\noun default
 son prácticamente iguales, la única diferencia consiste en la forma de
 romper la solución actual.
 En ambos casos se realizan diferentes formas de roturas (detalladas en
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Ruin"

\end_inset

), pero mientras RAR realiza 
\emph on
sólo
\emph default
 esas roturas, RARV siempre quita todos los nodos visitados por un vehículo
 (al azar) 
\emph on
más
\emph default
 las roturas que define RAR.
 De esta forma, RARV siempre buscará soluciones factibles con al menos un
 vehículo menos que la solución actual.
\end_layout

\begin_layout Standard
Así, teniendo al menos una instancia de RAR y una de RARV conectadas al
 árbitro, se busca en paralelo optimizar tanto distancia como número de
 vehículos requeridos.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
RAR/RARV
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
RAR(
\shape italic
mejor
\shape default
, 
\shape italic
vehicular?
\shape default
) {
\end_layout

\begin_deeper
\begin_layout LyX-Code
mientras no se reciba 
\series bold
\shape smallcaps
STOP
\series default
\shape default
:
\end_layout

\begin_deeper
\begin_layout LyX-Code

\shape italic
nueva
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

recibir_mejor_solucion()
\end_layout

\begin_layout LyX-Code
si nueva es mejor que 
\shape italic
mejor
\shape default
 {
\end_layout

\begin_deeper
\begin_layout LyX-Code

\shape italic
mejor
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\shape italic
nueva
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
si 
\shape italic
vehicular?
\shape default
 
\begin_inset Formula $\Rightarrow$
\end_inset


\shape italic
 r
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

arruinarVehiculo(
\shape italic
mejor
\shape default
)
\end_layout

\begin_layout LyX-Code
si no 
\begin_inset Formula $\Rightarrow$
\end_inset


\shape italic
 r
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

arruinar(
\shape italic
mejor
\shape default
)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\shape italic
r
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

recrear(
\shape italic
mejor - r
\shape default
, 
\shape italic
r
\shape default
)
\end_layout

\begin_layout LyX-Code
busqueda_local(
\shape italic
r
\shape default
)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
si 
\shape italic
r
\shape default
 es mejor que 
\shape italic
mejor
\shape default
 {
\end_layout

\begin_deeper
\begin_layout LyX-Code

\shape italic
mejor
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\shape italic
r
\end_layout

\begin_layout LyX-Code
enviar 
\shape italic
mejor
\shape default
 al árbitro
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
arruinarVehiculo(
\shape italic
solucion
\shape default
) {
\end_layout

\begin_deeper
\begin_layout LyX-Code

\shape italic
s
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

quitar un vehiculo al azar de 
\shape italic
solucion
\end_layout

\begin_layout LyX-Code
devolver arruinar(
\shape italic
s
\shape default
)
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
arruinar(
\shape italic
solucion
\shape default
) {
\end_layout

\begin_deeper
\begin_layout LyX-Code
por cada 
\shape italic
cliente
\shape default
 en 
\shape italic
solucion {
\end_layout

\begin_deeper
\begin_layout LyX-Code
quitar 
\shape italic
cliente
\shape default
 de 
\shape italic
solucion
\shape default
 con probabilidad 
\begin_inset Formula $\Pi$
\end_inset


\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
devolver 
\shape italic
solucion
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Solución inicial
\end_layout

\begin_layout Standard
Para poder arruinar y recrear una solución, se necesita generar una solución
 factible sobre la cual iterar.
 La solución inicial se construye utilizando la heurística del vecino más
 próximo 
\begin_inset CommandInset citation
LatexCommand citet
key "key-4"

\end_inset


\end_layout

\begin_layout Subsection
Ruin
\begin_inset CommandInset label
LatexCommand label
name "sub:Ruin"

\end_inset


\end_layout

\begin_layout Standard
En esta tesis se utilizaron dos funciones de arruine: aleatoria y espacial
\end_layout

\begin_layout LyX-Code
aleatorio(
\shape italic
solucion
\shape default
) {
\end_layout

\begin_deeper
\begin_layout LyX-Code
por cada 
\shape italic
cliente
\shape default
 en 
\shape italic
solucion {
\end_layout

\begin_deeper
\begin_layout LyX-Code
quitar 
\shape italic
cliente
\shape default
 de 
\shape italic
solucion
\shape default
 con probabilidad π
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
devolver 
\shape italic
solucion
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
espacial(solucion, distancia) {
\end_layout

\begin_deeper
\begin_layout LyX-Code
elegir un nodo 
\emph on
n
\emph default
 al azar
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
quitar de 
\emph on
solucion
\emph default
 todos los nodos cuya distancia a 
\emph on
n
\emph default
 sea menor a 
\emph on
distancia
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
devolver 
\shape italic
solucion
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
En el caso de RARV, la función de arruine siempre es aleatoria.
 En el caso de RAR, se elige entre aleatoria y espacial con probabilidad
 δ, donde δ es un parámetro.
 La distancia de arruine que utiliza RAR se elige también de forma aleatoria
 entre 
\begin_inset Formula $\frac{d}{2}$
\end_inset

 y 
\begin_inset Formula $\frac{2d}{3}$
\end_inset

 donde 
\begin_inset Formula $d$
\end_inset

 es la distancia promedio entre todos los nodos del problema.
\end_layout

\begin_layout Subsection
Recreate
\end_layout

\begin_layout Standard
Recrear consiste en reinsertar los nodos que fueron quitados (destruídos)
 de la solución intentando mejorar la solución existente.
 Se decidió por usar un algoritmo de 
\emph on
mejor inserción
\emph default
, donde cada nodo roto se intenta insertar en todas las posibles posiciones
 de todos los vehículos.
 De existir soluciones factibles tras la inserción, se elige la de menor
 largo y se procede al siguiente nodo hasta que no queden nodos por insertar.
 En el caso en que uno o más nodos sean ininsertables, es decir, no exista
 posición alguna en algún vehículo tal que la solución sea factible, se
 reintenta el procedimiento, con la solución rota original, pero reordenando
 los nodos rotos de forma que se intente primero agregar los ininsertables.
\end_layout

\begin_layout Standard
La idea detrás de este razonamiento es que, dados 
\begin_inset Formula $R=v_{1},v_{2},\ldots,v_{k}\subseteq V$
\end_inset

 nodos que hay que insertar en la solución, y 
\begin_inset Formula $I=v_{i_{1}},v_{i_{2}},\ldots,v_{i_{t}}\subseteq R$
\end_inset

 los nodos que no se pudieron insertar, es posible que un nodo 
\begin_inset Formula $v_{i_{j}}$
\end_inset

 no sea posible insertar porque exista 
\begin_inset Formula $v_{p}\in R\setminus I$
\end_inset

 que anule las posibilidades de inserción de 
\begin_inset Formula $v_{i_{j}}$
\end_inset

 (por capacidad de vehículos o ventana de tiempo).
 Al reordenar los nodos, se da lugar a la posibilidad que todos los nodos
 de 
\begin_inset Formula $I$
\end_inset

 sean insertables y también los de 
\begin_inset Formula $R\setminus I$
\end_inset

, que tenían otras opciones de inserción que no bloqueaban los nodos de
 
\begin_inset Formula $I$
\end_inset

 pero no fueron elegidas porque fue priorizada la solución de menor largo.
 Este procedimiento se reintenta 
\emph on
φ
\emph default
 veces, donde 
\emph on
φ
\emph default
 es un parámetro.
 
\end_layout

\begin_layout Standard
Si en alguna iteración resulta que 
\begin_inset Formula $v_{1}$
\end_inset

 es ininsertable (o sea el primer nodo es ininsertable) entonces se descarta
 esta solución rota como infactible, ya que no existe posición posible donde
 
\begin_inset Formula $v_{1}$
\end_inset

pueda ser insertado.
\end_layout

\begin_layout Standard
Este procedimiento es computacionalmente costoso ya ...
 (calcular el orden de complejidad)
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
recrear
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
recrear(
\shape italic
solucionRota
\shape default
, 
\shape italic
clientes
\shape default
) {
\end_layout

\begin_layout LyX-Code

\shape italic
ininsertables
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

{}
\end_layout

\begin_deeper
\begin_layout LyX-Code
por cada cliente en 
\shape italic
clientes
\shape default
 {
\end_layout

\begin_deeper
\begin_layout LyX-Code
por cada vehiculo en 
\shape italic
solucionRota
\shape default
 {
\end_layout

\begin_deeper
\begin_layout LyX-Code

\shape italic
nuevasSoluciones
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

obtener todas las 
\end_layout

\begin_deeper
\begin_layout LyX-Code
soluciones factibles resultantes de 
\end_layout

\begin_layout LyX-Code
insertar al cliente en la 
\shape italic
solucionRota
\end_layout

\end_deeper
\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
si 
\shape italic
nuevasSoluciones
\shape default
 es vacío
\end_layout

\begin_deeper
\begin_layout LyX-Code
agregar el cliente a 
\shape italic
ininsertables
\end_layout

\end_deeper
\begin_layout LyX-Code
si no
\end_layout

\begin_deeper
\begin_layout LyX-Code
actualizar 
\shape italic
solucionRota
\shape default
 con 
\end_layout

\begin_layout LyX-Code
la solución de menor largo 
\end_layout

\begin_layout LyX-Code
de 
\shape italic
nuevasSoluciones
\end_layout

\end_deeper
\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
si es vacio {
\end_layout

\begin_deeper
\begin_layout LyX-Code
devolver 
\shape italic
solucionRota
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
si no {
\end_layout

\begin_deeper
\begin_layout LyX-Code
/* se intenta cambiar el orden de inserción */
\end_layout

\begin_layout LyX-Code
reintentar 
\emph on
φ
\emph default
 veces:
\end_layout

\begin_deeper
\begin_layout LyX-Code
recrear(
\shape italic
solucionRota
\shape default
, 
\shape italic
ininsertables
\shape default
 + 
\end_layout

\begin_deeper
\begin_layout LyX-Code
(
\shape italic
clientes
\shape default
 - 
\shape italic
ininsertables
\shape default
))
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Búsqueda local
\end_layout

\begin_layout Subsection
Implementación
\end_layout

\begin_layout Section
Resultados
\end_layout

\begin_layout Section
Conclusiones
\end_layout

\begin_layout Section
Trabajo futuro
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "RR"
key "key-1"

\end_inset

Record Breaking Optimization Results Using the Ruin and Recreate Principle.
 Gerhard Schrimpf, Johannes Schneider, Hermann Stamm-Wilbrandt, and Gunter
 Dueck.
 1999.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "VRP"
key "key-2"

\end_inset

P.
 Toth and D.Vigo.
 The Vehicle Routing Problem.
 SIAM, 2002.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "MACS"
key "key-3"

\end_inset

L.
 M.
 Gambardella, É.
 Taillard and G.
 Agazzi.
 MACS-VRPTW: A Multiple Ant Colony System For Vehicle Routing Problems With
 Time Windows.
 New Ideas in Optimization McGraw-Hill, London, UK, pp.
 63-76, 1999
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "Flood"
key "key-4"

\end_inset

M.
 M.
 Flood, The Traveling Salesman Problem, Operations Research 4, 1956, 61-75.
\end_layout

\end_body
\end_document
