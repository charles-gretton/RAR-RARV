#LyX 1.6.4 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language spanish
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Un algoritmo distribuído de Ruin & Recreate para VRPTW
\end_layout

\begin_layout Author
Andrés Martínez Quijano
\begin_inset Newline newline
\end_inset

aquijano@dc.uba.ar
\end_layout

\begin_layout Abstract
bla bla bla
\end_layout

\begin_layout Verse
\begin_inset Newpage pagebreak
\end_inset

dedicatorias locas
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList algorithm

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Section
Descripción del problema
\end_layout

\begin_layout Subsection
Introducción
\end_layout

\begin_layout Standard
El ruteo de vehículos es un problema logístico muy presente en la cotidianeidad.
 Consiste en la optimización de asignación de rutas a vehículos en un orden
 y tiempo determinados, de forma de minimizar la distancia total recorrida,
 la cantidad de vehículos necesarios para cumplir los requisitos, o, en
 general, ambas cosas.
 En su instancia más simple, el VRP
\begin_inset Foot
status open

\begin_layout Plain Layout
del inglés 
\emph on
Vehicle Routing Problem
\end_layout

\end_inset

, existe un número fijo de clientes con demandas de mercadería que debe
 ser satisfecha con la visita de un vehículo (o camión).
 Dado que los camiones tienen capacidad limitada, en general no es viable
 que un sólo camión pueda recorrer todos los clientes, por lo que se agregan
 camiones a la solución.
\end_layout

\begin_layout Standard
Una solución a una instancia de VRP consiste en un conjunto de rutas que
 debe recorrer cada vehículo, partiendo y terminando en el 
\emph on
depósito,
\emph default
 de forma que todos los clientes sean visitados y sus demandas y restricciones
 sean cumplidas.
 El objetivo del VRP es encontrar la mejor solución, según el parámetro
 de optimización deseado (vehículos, distancia, tiempos de espera, etc.).
 Existen diversas variantes al problema original; en esta tesis se trata
 exclusivamente el VRPTW
\begin_inset Foot
status open

\begin_layout Plain Layout
del inglés 
\emph on
Vehicle Routing Problem with Time Windows
\end_layout

\end_inset

, una variante donde cada cliente tiene asociada una ventana de tiempo que
 restringe el momento en que puede ser visitada por un vehículo y un tiempo
 necesario de servicio.
 Si bien un camión puede arribar a un cliente antes de tiempo, deberá esperar
 que abra su ventana de tiempo antes de poder iniciar la descarga, pero
 nunca podrá arribar luego de cerrada la ventana.
 El tiempo de servicio de cada cliente se impone como el tiempo que toma
 la descarga de mercadería.
 En general, la ventana de tiempo aplica solamente a la llegada del camión
 y no al tiempo de servicio, o sea que, por ejemplo, se acepta que un camión
 llegue a una hora a un cliente de forma que el servicio termine después
 de la ventana de tiempo haya cerrado.
\end_layout

\begin_layout Subsection
Notación
\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $G=(V,A)$
\end_inset

 grafo completo donde 
\begin_inset Formula $V=\{0,\ldots,n\}$
\end_inset

 es el conjunto de vértices y 
\begin_inset Formula $A$
\end_inset

 el conjunto de ejes.
 El nodo 
\begin_inset Formula $0$
\end_inset

 corresponde al depósito de donde parten los vehículos y 
\begin_inset Formula $i=1\ldots n$
\end_inset

 los clientes.
 También se suele notar al depósito como el nodo 
\begin_inset Formula $n+1$
\end_inset

, aunque en esta tesis siempre se notará como el nodo 
\begin_inset Formula $0$
\end_inset

.
\end_layout

\begin_layout Standard
Un costo no negativo 
\begin_inset Formula $c_{ij}$
\end_inset

 es asociado a cada eje 
\begin_inset Formula $(i,j)\in A$
\end_inset

, representando el costo de viajar desde el nodo 
\begin_inset Formula $i$
\end_inset

 hasta el nodo 
\begin_inset Formula $j$
\end_inset

.
 En el caso que plantea esta tesis, se asume que el grafo no es dirigido,
 o sea 
\begin_inset Formula $c_{ij}=c_{ji}\forall i,j\in A,i\neq j$
\end_inset

.
 
\end_layout

\begin_layout Standard
Cada cliente tiene asociado una demanda no negativa 
\begin_inset Formula $d_{i}$
\end_inset

 (siendo 
\begin_inset Formula $d_{0}=0$
\end_inset

) y una ventana de tiempo 
\begin_inset Formula $[a_{i},b_{i}]$
\end_inset

 con 
\begin_inset Formula $a_{i}<b_{i}$
\end_inset

.
 Los parámetros 
\begin_inset Formula $E$
\end_inset

 y 
\begin_inset Formula $L$
\end_inset

 indican el comienzo y fin, respectivamente, de la ventana de tiempo del
 depósito: 
\begin_inset Formula $[a_{0},b_{0}]=[E,L]$
\end_inset

, donde 
\begin_inset Formula $a_{0}\leq a_{i}\forall i\in V$
\end_inset

 y 
\begin_inset Formula $b_{0}\geq b_{i}\forall i\in V$
\end_inset

.
 También se asocia a cada cliente un valor no negativo 
\begin_inset Formula $s_{i}$
\end_inset

 indicando el tiempo de servicio, esto es, el tiempo mínimo que un vehículo
 debe permanecer en el cliente cargando o descargando mercadería antes de
 poder proseguir su ruta.
\end_layout

\begin_layout Standard
Se dispone de 
\begin_inset Formula $K$
\end_inset

 vehículos idénticos entre sí, cada uno con capacidad de carga 
\begin_inset Formula $C$
\end_inset

\SpecialChar \@.

\end_layout

\begin_layout Standard
Se define además:
\end_layout

\begin_layout Standard
\begin_inset Formula $x_{ijk}=\begin{cases}
1 & \mbox{si \ensuremath{(i,j)\in A\mbox{ es usado por el vehículo \ensuremath{k}}\in K}}\\
0 & \mbox{si no}\end{cases}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $w_{ik},i\in V,k\in K$
\end_inset

 el comienzo del servicio en el nodo 
\begin_inset Formula $i$
\end_inset

 por el vehículo 
\begin_inset Formula $k$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\Delta^{+}(i)=\{j/(i,j)\in A\}$
\end_inset

 los nodos 
\emph on
salientes
\emph default
 del nodo 
\begin_inset Formula $i$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Formula $\Delta^{-}(i)=\{j/(j,i)\in A\}$
\end_inset

 los nodos 
\emph on
entrantes 
\emph default
al nodo 
\begin_inset Formula $i$
\end_inset

 
\begin_inset Foot
status open

\begin_layout Plain Layout
dado que esta tesis considera únicamente grafos completos, 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
\lang english

\begin_inset Formula $\Delta^{+}(i)=\Delta^{-}(i)=V\setminus\{i\}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Formulación
\end_layout

\begin_layout Standard
Planteado como un problema de programación lineal, la solución óptima a
 un problema VRPTW consiste en hallar:
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\min\underset{k\in K}{\sum}\underset{(i,j)\in A}{\sum c_{ij}x_{ijk}}\label{eq:1}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
sujeto a:
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\underset{k\in K}{\sum}\underset{j\in\Delta^{+}(i)}{\sum x_{ijk}}=1\qquad\forall k\in K\label{eq:2}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\underset{j\in\Delta^{+}(0)}{\sum x_{0jk}}=1\qquad\forall k\in K\label{eq:3}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\underset{i\in\Delta^{-}(j)}{\sum x_{ijk}}-\underset{i\in\Delta^{+}(j)}{\sum x_{ijk}}=0\qquad\forall k\in K,j\in N\label{eq:4}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\underset{i\in\Delta^{-}(n+1)}{\sum x_{i,n+1,k}}=1\qquad\forall k\in K\label{eq:5}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
x_{ijk}(w_{ik}+s_{i}+t_{ij}-w_{jk})\leq0\qquad\forall k\in K,(i,j)\in A\label{eq:6}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
a_{i}\underset{j\in\Delta^{+}(i)}{\sum x_{ijk}}\leq w_{ik}\leq b_{i}\underset{j\in\Delta^{+}(i)}{\sum x_{ijk}}\qquad\forall k\in K,i\in N\label{eq:7}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
E\leq w_{ik}\leq L\qquad\forall k\in K,i\in\{0,n+1\}\label{eq:8}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\underset{i\in N}{\sum}d_{i}\underset{j\in\Delta^{+}(i)}{\sum x_{ijk}}\leq C\qquad\forall k\in K\label{eq:9}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
x_{ijk}\geq0\qquad\forall k\in K,(i,j)\in A\label{eq:10}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
x_{ijk}\in\{0,1\}\qquad\forall k\in K,(i,j)\in A\label{eq:11}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
donde:
\end_layout

\begin_layout Standard
\begin_inset Formula $N=V\setminus\{0\}$
\end_inset

 el conjunto de clientes
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:2"

\end_inset

 restringe las visitas a sólo un vehículo por cliente
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:3"

\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:4"

\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:5"

\end_inset

 modelan el tipo de recorridos que un vehículo puede hacer (salir del depósito,
 visitar clientes y volver al depósito)
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:6"

\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:8"

\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:9"

\end_inset

 aseguran factibilidad en cuanto a ventanas de tiempo y capacidad de vehículos
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:7"

\end_inset

 fuerza que 
\begin_inset Formula $w_{ik}=0$
\end_inset

 si el vehículo 
\begin_inset Formula $k$
\end_inset

 no visita al cliente 
\begin_inset Formula $i$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:10"

\end_inset

 establece el caracter no-negativo de 
\begin_inset Formula $x_{ijk}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:11"

\end_inset

 limita 
\begin_inset Formula $x_{ijk}$
\end_inset

 a valores 
\begin_inset Formula $0$
\end_inset

 ó 
\begin_inset Formula $1$
\end_inset


\end_layout

\begin_layout Section
Metaheurísticas
\end_layout

\begin_layout Standard
Dado que 
\noun on
VRPTW
\noun default
 es un problema 
\noun on
NP-HARD
\noun default
, resulta impracticable buscar la optimalidad mediante algoritmos exactos
 en instancias grandes, por lo que se acude a heurísticas o metaheurísticas
 para obtener buenas soluciones factibles de los problemas en tiempos acotados.
 
\end_layout

\begin_layout Standard
Algunas de las metaheurísticas más utilizadas en los últimos tiempos:
\end_layout

\begin_layout Enumerate

\emph on
Simulated Annealing
\emph default
: basada en un proceso metalurgico que consiste en calentar y dejar enfriar
 controladamente un material.
 Al calentarse los átomos salen de sus posiciones originales y se muevan
 al azar, al enfriarse lentamente tienen mayores posibilidades de encontrar
 configuraciones de menor energía que la inicial
\end_layout

\begin_layout Enumerate

\emph on
Tabú search
\emph default
: una búsqueda local que permite soluciones peores a la actual con cierta
 probabilidad.
 De esta forma, se evitan mínimos locales que frenan las mejoras de soluciones.
 Para evitar un ciclo entre las mejoras encontradas, se utiliza una 
\emph on
lista tabú
\emph default
 que impide que determinadas soluciones sean aceptadas.
\end_layout

\begin_layout Enumerate

\emph on
Algoritmos genéticos
\emph default
: basada en la evolución natural.
 En cada iteración una solución dada provee un conjunto de nuevas soluciones
 que son evaluadas y las 
\emph on
más aptas
\emph default
, es decir, las de mejor función objetivo, tendrán más chances de ser parte
 de la nueva población, que se formará en base a mutaciones y combinaciones
 de las actuales.
\end_layout

\begin_layout Enumerate

\emph on
Comportamiento colectivo
\emph default
: son algoritmos basados en comportamientos colectivos de algunos animales,
 por ejemplo: colonia de hormigas, colonia de abejas, libélulas, etc.
\end_layout

\begin_layout Section
Colonia de hormigas
\end_layout

\begin_layout Section
Ruin & Recreate
\begin_inset CommandInset label
LatexCommand label
name "sec:Ruin-&-Recreate"

\end_inset


\end_layout

\begin_layout Standard
La metaheurística Ruin & Recreate 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 consiste en arruinar (
\emph on
ruin
\emph default
) una solución (generalmente factible) para luego reconstruirla (
\emph on
recreate
\emph default
) de forma de obtener una mejor solución de la que se partió (ver Algoritmo
 
\begin_inset CommandInset ref
LatexCommand ref
reference "Flo:RAR"

\end_inset

)
\end_layout

\begin_layout Standard
En el caso de VRPTW, arruinar la solución consiste en quitar 
\begin_inset Formula $t$
\end_inset

 clientes según un criterio de arruine, dejando una solución infactible,
 donde sólo 
\begin_inset Formula $n-t$
\end_inset

 clientes son visitados por los vehículos.
 Luego el algoritmo intenta reintroducir los 
\begin_inset Formula $t$
\end_inset

 clientes a la solución rota, tratando de obtener una mejor solución de
 la cual se partió.
 El proceso se repite hasta que una condición es satisfecha, sea porque
 se consiguió una solución suficientemente buena, porque se cumplió un número
 fijo de iteraciones, porque ocurrieron suficientes iteraciones sin obtener
 mejoras a la solución o cualquier otra condición de corte.
\end_layout

\begin_layout Standard
El 
\emph on
quid
\emph default
 del algoritmo es, claramente, la forma en que se arruina y recrea la solución\SpecialChar \@.

\end_layout

\begin_layout Subsection
Ruin
\end_layout

\begin_layout Standard
Arruinar la solución es computacionalmente sencillo, aunque algorítmicamente
 es tan importante como recrearla.
 Elegir qué nodos quitar de la solución es crucial a la hora de poder generar
 una mejora o no.
 En 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 se plantean diversas variantes básicas en lo referido a ruteo de vehículos,
 por ejemplo:
\end_layout

\begin_layout Itemize
Espacial: dado un nodo 
\begin_inset Formula $n$
\end_inset

 se quitan de la solución 
\begin_inset Formula $n$
\end_inset

 y todos los nodos cuya distancia a 
\begin_inset Formula $n$
\end_inset

 sea menor a un parámetro dado
\end_layout

\begin_layout Itemize
Cadena: se quita una cadena de nodos consecutivos en la solución de largo
 parametrizable
\end_layout

\begin_layout Itemize
Azar: cada nodo de la solución se quita según un parámetro de probabilidad
\end_layout

\begin_layout Subsection
Recreate
\end_layout

\begin_layout Standard
La reconstrucción de una solución consiste en volver a incluír los nodos
 quitados en la etapa 
\begin_inset Quotes eld
\end_inset

ruin
\begin_inset Quotes erd
\end_inset

 de forma de conseguir una mejor solución a la original.
 Idealmente, los nodos quitados se agregarían de forma óptima a la instancia
 rota, pero dado que la cantidad de posibles reinserciones crece exponencialment
e en función de la cantidad de clientes quitados, esto es impracticable.
 Esta etapa suele ser la computacionalmente más complicada, en términos
 de recursos utilizados por la computadora, ya que en general se quiere
 que la solución reconstruída sea factible, por lo que las reinserciones
 deben satisfacer todos los requerimientos que el problema impone.
 Otro enfoque es permitir soluciones intermedias no factibles, de forma
 tal que puedan ser arruinadas nuevamente y en la subisiguiente recreación
 conseguir una solución factible que quizá no era accesible de no permitir
 la solución intermedia.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Ruin & Recreate para VRPTW
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Flo:RAR"

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
repetir
\end_layout

\begin_layout LyX-Code

\emph on
sol
\emph default

\begin_inset Formula $\leftarrow$
\end_inset

solución inicial
\end_layout

\begin_layout LyX-Code
arruinar 
\emph on
sol
\emph default
 quitando 
\emph on
n
\emph default
 clientes
\end_layout

\begin_layout LyX-Code

\emph on
nueva_sol
\emph default

\begin_inset Formula $\leftarrow$
\end_inset

reconstruir 
\emph on
sol
\end_layout

\begin_layout LyX-Code
si 
\emph on
nueva_sol
\emph default
 es mejor que 
\emph on
sol
\end_layout

\begin_deeper
\begin_layout LyX-Code

\emph on
sol
\emph default

\begin_inset Formula $\leftarrow$
\end_inset


\emph on
nueva_sol
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
hasta
\series default
 que se cumpla un criterio de finalización
\end_layout

\end_inset


\end_layout

\begin_layout Section
La solución
\end_layout

\begin_layout Standard
Esta tesis presenta un algoritmo paralelo, distribuído, escalable, con objetivo
 múltiple que apunta a disminuír tanto la longitud total recorrida por los
 vehículos como la cantidad de vehículos necesaria para visitar todos los
 clientes.
\end_layout

\begin_layout Subsection
Objetivo Múltiple
\end_layout

\begin_layout Standard
Para lograr mayor efectividad al resolver el problema, se ejecutan en paralelo
 dos algoritmos similares pero con distintos objetivos.
 
\emph on
RAR
\emph default
 (Ruin & Recreate) intentará optimizar el recorrido total de la solución
 mientras que 
\emph on
RARV
\emph default
 (Ruin & Recreate Vehicular) se enfoca exclusivamente en reducir la cantidad
 de vehículos necesarios.
 Como es de suponer, ambos algoritmos utilizan la metaheurística Ruin &
 Recreate, pero con diferente tipo de rotura (como se detalla en 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:RAR-y-RARV"

\end_inset

).
 Las instancias se comunican entre sí a través de un árbitro (ver 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Arquitectura"

\end_inset

)
\end_layout

\begin_layout Subsection
Arquitectura
\begin_inset CommandInset label
LatexCommand label
name "sub:Arquitectura"

\end_inset


\end_layout

\begin_layout Standard
La solución planteada en esta tesis está pensada para ser ejecutada concurrentem
ente en varias computadoras o núcleos conectados en red.
 Las instancias de los algoritmos RAR y RARV se ejecutan independientemente
 en cada núcleo o computadora, de esta forma, por ejemplo, una computadora
 con 4 núcleos podría ejecutar 4 instancias concurrentemente, y 2 computadoras
 de 4 núcleos 8 instancias.
 La solución fue diseñada de forma tal que puedan agregarse computadoras
 (ergo núcleos) a la red trivialmente y sin límites, incluso una vez iniciada
 la ejecución.
\end_layout

\begin_layout Standard
Todas las instancias se conectan a un único árbitro, el cual envía parámetros
 de los algoritmos, el problema a resolver y la mejor solución hasta el
 momento a través de la red, para que cada algoritmo pueda empezar a trabajar.
 Enviar los parámetros de configuración y la instancia del problema facilita
 la ejecución cuando se cuenta con un gran número de instancias, ya que
 sólo hace falta modificar los parámetros del árbitro y ejecutarlo, y no
 hay necesidad de indicar por separado a cada instancia el problema sobre
 el cual se ha de trabajar o modificar parámetros de configuración de los
 algoritmos.
\end_layout

\begin_layout Standard
Cuando una instancia recibe el problema y la mejor solución, guarda esta
 última y comienza a buscar una mejor solución.
 Según el tipo de instancia, 
\emph on
RAR
\emph default
 buscará mejorar el largo del recorrido y 
\emph on
RARV
\emph default
 buscará reducir la cantidad de vehículos necesarios.
 Cuando se encuentre una solución mejor a la mejor actual, se la envía al
 árbitro asincrónicamente y sigue buscando mejores soluciones.
 El árbitro se encarga de distribuír a todas las instancias cuando recibe
 una solución que es mejor a la actual (ver algoritmo 
\begin_inset CommandInset ref
LatexCommand ref
reference "Flo:AlgoArbitro"

\end_inset

)
\end_layout

\begin_layout Subsubsection
Asincronía y latencia
\end_layout

\begin_layout Standard
Viendo en detalle el algoritmo
\begin_inset CommandInset ref
LatexCommand ref
reference "Flo:AlgoArbitro"

\end_inset

, el árbitro chequea que la solución recibida sea mejor que la solución
 actual antes de guardarla como nueva mejor solución.
 Esto podría parecer redundante ya que todas las instancias tienen siempre
 la misma mejor solución, dado que el árbitro la envía a las instancias
 al actualizarla.
 Sin embargo, las instancias no detienen su procesamiento al recibir un
 mensaje del árbitro, y además existen latencias en la red que pueden provocar
 discrepancias, por lo que esa guarda es necesaria.
 Un ejemplo de por qué es necesaria esa condición es el siguiente:
\end_layout

\begin_layout Enumerate
El árbitro calcula la solución inicial en 
\emph on

\begin_inset Formula $N$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $i_{1}$
\end_inset

 encuentra una mejora de 
\begin_inset Formula $N-2$
\end_inset

 y la envía
\end_layout

\begin_layout Enumerate
el árbitro la guarda como nueva mejor y redistribuye
\end_layout

\begin_layout Enumerate
\begin_inset Formula $i_{2}$
\end_inset

 encuentra una mejora de 
\begin_inset Formula $N-1$
\end_inset

 y la envía
\end_layout

\begin_layout Enumerate
\begin_inset Formula $i_{2}$
\end_inset

 recibe la mejora de 
\begin_inset Formula $N-2$
\end_inset

 del árbitro
\end_layout

\begin_layout Standard
\begin_inset Formula $i_{2}$
\end_inset

no cesa su búsqueda de mejor solución al recibir una solución del árbitro,
 y también puede pasar que por demoras en la red ésta llegue luego de haber
 encontrado la mejora del punto 4, por lo que sin la guarda mencionada se
 tomaría 
\begin_inset Formula $N-1$
\end_inset

 como mejor solución cuando 
\begin_inset Formula $i_{1}$
\end_inset

 había encontrado una de 
\begin_inset Formula $N-2$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename arquitectura.png
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Diagrama de la arquitectura distribuída
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Árbitro
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Flo:AlgoArbitro"

\end_inset


\end_layout

\begin_layout LyX-Code
arbitro(
\emph on
problema
\emph default
, 
\shape italic
tiempo
\shape default
) {
\end_layout

\begin_deeper
\begin_layout LyX-Code

\shape italic
mejor
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

vecino_mas_cercano(
\shape italic
problema
\shape default
)
\end_layout

\begin_layout LyX-Code
mientras no pase 
\shape italic
tiempo
\shape default
 {
\end_layout

\begin_deeper
\begin_layout LyX-Code

\shape italic
nueva
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

recibir_mejor_solucion()
\end_layout

\begin_layout LyX-Code
si 
\emph on
nueva
\emph default
 es mejor que 
\shape italic
mejor
\shape default
 {
\end_layout

\begin_deeper
\begin_layout LyX-Code

\shape italic
mejor
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\shape italic
nueva
\end_layout

\begin_layout LyX-Code
enviar 
\shape italic
nueva
\shape default
 a las instancias
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
enviar 
\series bold
\shape smallcaps
STOP
\series default
\shape default
 a las instancias
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Solución inicial
\end_layout

\begin_layout Standard
Para poder arruinar y recrear una solución, se necesita generar una solución
 factible sobre la cual iterar.
 La solución inicial la construye el árbitro utilizando la heurística del
 vecino más próximo
\begin_inset CommandInset citation
LatexCommand citet
key "key-4"

\end_inset

, a la cual se le aplica un proceso de búsqueda local (ver 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Búsqueda-local"

\end_inset

)
\end_layout

\begin_layout Subsection
Recreate
\begin_inset CommandInset label
LatexCommand label
name "sub:Recreate"

\end_inset


\end_layout

\begin_layout Standard
Recrear consiste en reinsertar los nodos que fueron quitados (destruídos)
 de la solución intentando obtener una solución que sea mejor de la que
 se partió.
 Se decidió por usar un algoritmo de 
\emph on
mejor inserción
\emph default
, donde cada cliente quitado se intenta insertar en todas las posibles posicione
s de todos los vehículos.
 De existir soluciones factibles tras la inserción, se elige la de menor
 largo y se procede al siguiente nodo hasta que no queden nodos por insertar.
 En el caso en que uno o más nodos sean ininsertables, es decir, no exista
 posición alguna en algún vehículo tal que la solución sea factible, se
 reintenta el procedimiento, con la solución rota original, pero reordenando
 los nodos rotos de forma que se intente primero agregar los ininsertables.
\end_layout

\begin_layout Standard
La idea detrás de este razonamiento es que, dados 
\begin_inset Formula $R=v_{1},v_{2},\ldots,v_{k}\subseteq V$
\end_inset

 nodos que hay que insertar en la solución, y 
\begin_inset Formula $I=v_{1}^{i},v_{2}^{i},\ldots,v_{t}^{i}\subseteq R$
\end_inset

 los nodos que no se pudieron insertar, es posible que un nodo 
\begin_inset Formula $v_{j}^{i}$
\end_inset

 no sea posible insertar porque exista 
\begin_inset Formula $v_{p}\in R\setminus I$
\end_inset

 que anule las posibilidades de inserción de 
\begin_inset Formula $v_{j}^{i}$
\end_inset

 (por capacidad de vehículos o ventana de tiempo).
 Al reordenar los nodos, se da lugar a la posibilidad que todos los nodos
 de 
\begin_inset Formula $I$
\end_inset

 sean insertables y también los de 
\begin_inset Formula $R\setminus I$
\end_inset

, que tenían otras opciones de inserción que no bloqueaban los nodos de
 
\begin_inset Formula $I$
\end_inset

 pero no fueron elegidas porque fue priorizada la solución de menor largo.
 Este procedimiento se reintenta 
\emph on
φ
\emph default
 veces, donde 
\emph on
φ
\emph default
 es un parámetro de configuración.
\end_layout

\begin_layout Standard
Si en alguna iteración resulta que 
\begin_inset Formula $v_{1}^{i}$
\end_inset

 es ininsertable (o sea el primer nodo es ininsertable) entonces se descarta
 esta solución rota como infactible, ya que no existe posición posible donde
 
\begin_inset Formula $v_{1}^{i}$
\end_inset

pueda ser insertado.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
recrear
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
recrear(
\shape italic
solucionRota
\shape default
, 
\shape italic
clientes
\shape default
) {
\end_layout

\begin_layout LyX-Code

\shape italic
ininsertables
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

{}
\end_layout

\begin_deeper
\begin_layout LyX-Code
por cada cliente en 
\shape italic
clientes
\shape default
 {
\end_layout

\begin_deeper
\begin_layout LyX-Code
por cada vehiculo en 
\shape italic
solucionRota
\shape default
 {
\end_layout

\begin_deeper
\begin_layout LyX-Code

\shape italic
nuevasSoluciones
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

obtener todas las 
\end_layout

\begin_deeper
\begin_layout LyX-Code
soluciones factibles resultantes de 
\end_layout

\begin_layout LyX-Code
insertar al cliente en la 
\shape italic
solucionRota
\end_layout

\end_deeper
\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
si 
\shape italic
nuevasSoluciones
\shape default
 es vacío
\end_layout

\begin_deeper
\begin_layout LyX-Code
agregar el cliente a 
\shape italic
ininsertables
\end_layout

\end_deeper
\begin_layout LyX-Code
si no
\end_layout

\begin_deeper
\begin_layout LyX-Code
actualizar 
\shape italic
solucionRota
\shape default
 con 
\end_layout

\begin_layout LyX-Code
la solución de menor largo 
\end_layout

\begin_layout LyX-Code
de 
\shape italic
nuevasSoluciones
\end_layout

\end_deeper
\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
si es vacio {
\end_layout

\begin_deeper
\begin_layout LyX-Code
devolver 
\shape italic
solucionRota
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
si no {
\end_layout

\begin_deeper
\begin_layout LyX-Code
/* se intenta cambiar el orden de inserción */
\end_layout

\begin_layout LyX-Code
reintentar 
\emph on
φ
\emph default
 veces:
\end_layout

\begin_deeper
\begin_layout LyX-Code
recrear(
\shape italic
solucionRota
\shape default
, 
\shape italic
ininsertables
\shape default
 + 
\end_layout

\begin_deeper
\begin_layout LyX-Code
(
\shape italic
clientes
\shape default
 - 
\shape italic
ininsertables
\shape default
))
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
RAR y RARV
\begin_inset CommandInset label
LatexCommand label
name "sub:RAR-y-RARV"

\end_inset


\end_layout

\begin_layout Standard
RAR y RARV son los algoritmos que intentan optimizar el largo total del
 recorrido y la cantidad de vehículos, respectivamente.
\end_layout

\begin_layout Standard
Ambos casos utilizan la metaheurística 
\emph on
Ruin & Recreate
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 y en ambos casos se recrea la solución con el mismo procedimiento, la diferenci
a radica en cómo se arruina la solución.
\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $S=v_{1}^{1},v_{2}^{1},\ldots,v_{n_{1}}^{1},v_{1}^{2},v_{2}^{2},\ldots,v_{n_{2}}^{2},\ldots,v_{1}^{k},v_{2}^{k},\ldots,v_{n_{k}}^{k}$
\end_inset

 una solución factible de un problema.
 
\end_layout

\begin_layout Standard
\begin_inset Formula $S$
\end_inset

 tiene un total de 
\begin_inset Formula $k$
\end_inset

 vehículos donde 
\begin_inset Formula $v^{i}$
\end_inset

 visita 
\begin_inset Formula $n_{i}$
\end_inset

 clientes.
 Por simplicidad, se omite en cada vehículo el primer y último cliente que
 en ambos casos es 
\begin_inset Formula $v_{0}$
\end_inset

, el depósito.
\end_layout

\begin_layout Standard
Como se detalló en 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Recreate"

\end_inset

, el algoritmo de recreación nunca agrega nuevos vehículos, por lo que,
 exceptuando la etapa de búsqueda local (ver 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Búsqueda-local"

\end_inset

) que se efectúa en cada iteración, la única forma de reducir el número
 de vehículos necesarios sería si la rotura incluyera un vehículo completo.
 Es decir: dado 
\begin_inset Formula $S\setminus R$
\end_inset

 la solución rota, donde 
\begin_inset Formula $R=v_{1},v_{2},\ldots,v_{r}$
\end_inset

 son los clientes quitados de 
\begin_inset Formula $S$
\end_inset

, sólo si 
\begin_inset Formula $vehiculos(S\setminus R)<vehiculos(S)$
\end_inset

 se da la posibilidad que la reinserción de los 
\begin_inset Formula $R$
\end_inset

 vehículos en 
\begin_inset Formula $S\setminus R$
\end_inset

 sea exitosa y se halle una solución todos los clientes puedan satisfechos
 con menos vehículos que en 
\begin_inset Formula $S$
\end_inset

.
\end_layout

\begin_layout Standard
Tomando esto en consideración, 
\emph on
RAR
\emph default
 y 
\emph on
RARV
\emph default
 se diseñaron teniendo en cuenta específicamente:
\end_layout

\begin_layout Itemize

\emph on
RAR
\emph default
 no debe arruinar vehículos completos
\end_layout

\begin_layout Itemize

\emph on
RARV
\emph default
 debe arruinar uno y sólo un vehículo completo
\end_layout

\begin_layout Standard
El objetivo de 
\emph on
RAR
\emph default
 es minimizar el largo del recorrido.
 Si 
\emph on
RAR
\emph default
 quitara un vehículo completo, estaría buscando entonces una solución con,
 al menos, un vehículo menos, lo cual es altamente probable que sea infactible,
 desaprovechando entonces la iteración actual.
 Además, 
\emph on
RARV
\emph default
 está enfocado justamente a ese menester, con lo cual habrían más iteraciones
 intentando reducir vehículos y desbalanceando la configuración de la red.
\end_layout

\begin_layout Standard
Análogamente, si 
\emph on
RARV
\emph default
 no arruina un vehículo en cada iteración estaría buscando una solución
 con el número de vehículos actual, cosa no deseada.
 Por otro lado, si 
\emph on
RARV
\emph default
 quitara más de un vehículo estaría intentando buscar una solución que,
 con alta probabilidad, sería infactible, a excepción de las primeras iteracione
s, por lo que se limita a un vehículo la rotura de 
\emph on
RARV
\emph default
.
\end_layout

\begin_layout Standard
En esta tesis se utilizaron dos funciones de arruine: aleatoria y espacial
\end_layout

\begin_layout LyX-Code
aleatorio(
\shape italic
solucion
\shape default
) {
\end_layout

\begin_deeper
\begin_layout LyX-Code
por cada 
\shape italic
cliente
\shape default
 en 
\shape italic
solucion {
\end_layout

\begin_deeper
\begin_layout LyX-Code
quitar 
\shape italic
cliente
\shape default
 de 
\shape italic
solucion
\shape default
 con probabilidad π
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
devolver 
\shape italic
solucion
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
espacial(
\emph on
solucion
\emph default
, 
\emph on
distancia
\emph default
) {
\end_layout

\begin_deeper
\begin_layout LyX-Code
elegir un cliente 
\emph on
n
\emph default
 al azar
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
quitar de 
\emph on
solucion
\emph default
 todos los clientes cuya distancia a 
\emph on
n
\emph default
 sea menor a 
\emph on
distancia
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
devolver 
\shape italic
solucion
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
RAR/RARV
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
RAR(
\shape italic
mejor
\shape default
, 
\shape italic
vehicular?
\shape default
) {
\end_layout

\begin_deeper
\begin_layout LyX-Code
mientras no se reciba 
\series bold
\shape smallcaps
STOP
\series default
\shape default
:
\end_layout

\begin_deeper
\begin_layout LyX-Code

\shape italic
nueva
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

recibir_mejor_solucion()
\end_layout

\begin_layout LyX-Code
si nueva es mejor que 
\shape italic
mejor
\shape default
 {
\end_layout

\begin_deeper
\begin_layout LyX-Code

\shape italic
mejor
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\shape italic
nueva
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
si 
\shape italic
vehicular?
\shape default
 
\begin_inset Formula $\Rightarrow$
\end_inset


\shape italic
 r
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

arruinarVehiculo(
\shape italic
mejor
\shape default
)
\end_layout

\begin_layout LyX-Code
si no 
\begin_inset Formula $\Rightarrow$
\end_inset


\shape italic
 r
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

arruinar(
\shape italic
mejor
\shape default
)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\shape italic
r
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

recrear(
\shape italic
mejor - r
\shape default
, 
\shape italic
r
\shape default
)
\end_layout

\begin_layout LyX-Code
busqueda_local(
\shape italic
r
\shape default
)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
si 
\shape italic
r
\shape default
 es mejor que 
\shape italic
mejor
\shape default
 {
\end_layout

\begin_deeper
\begin_layout LyX-Code

\shape italic
mejor
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\shape italic
r
\end_layout

\begin_layout LyX-Code
enviar 
\shape italic
mejor
\shape default
 al árbitro
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
arruinarVehiculo(
\shape italic
solucion
\shape default
) {
\end_layout

\begin_deeper
\begin_layout LyX-Code

\shape italic
s
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

quitar un vehiculo al azar de 
\shape italic
solucion
\end_layout

\begin_layout LyX-Code
devolver arruinar(
\shape italic
s
\shape default
)
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
arruinar(
\shape italic
solucion
\shape default
) {
\end_layout

\begin_deeper
\begin_layout LyX-Code
por cada 
\shape italic
cliente
\shape default
 en 
\shape italic
solucion {
\end_layout

\begin_deeper
\begin_layout LyX-Code
quitar 
\shape italic
cliente
\shape default
 de 
\shape italic
solucion
\shape default
 con probabilidad 
\begin_inset Formula $\Pi$
\end_inset


\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
devolver 
\shape italic
solucion
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La distancia de arruine que utiliza RAR se elige también de forma aleatoria
 entre 
\begin_inset Formula $\nicefrac{d}{2}$
\end_inset

 y 
\begin_inset Formula $\nicefrac{2d}{3}$
\end_inset

 donde 
\begin_inset Formula $d$
\end_inset

 es la distancia promedio entre todos los nodos del problema.
\end_layout

\begin_layout Subsection
Búsqueda local
\begin_inset CommandInset label
LatexCommand label
name "sub:Búsqueda-local"

\end_inset


\end_layout

\begin_layout Subsection
Implementación
\end_layout

\begin_layout Section
Resultados
\end_layout

\begin_layout Section
Conclusiones
\end_layout

\begin_layout Section
Trabajo futuro
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "RR"
key "key-1"

\end_inset

Gerhard Schrimpf, Johannes Schneider, Hermann Stamm-Wilbrandt, and Gunter
 Dueck, Record Breaking Optimization Results Using the Ruin and Recreate
 Principle.
 1999.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "VRP"
key "key-2"

\end_inset

P.
 Toth and D.Vigo.
 The Vehicle Routing Problem.
 SIAM, 2002.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "MACS"
key "key-3"

\end_inset

L.
 M.
 Gambardella, É.
 Taillard and G.
 Agazzi.
 MACS-VRPTW: A Multiple Ant Colony System For Vehicle Routing Problems With
 Time Windows.
 New Ideas in Optimization McGraw-Hill, London, UK, pp.
 63-76, 1999
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "Flood"
key "key-4"

\end_inset


\end_layout

\end_body
\end_document
